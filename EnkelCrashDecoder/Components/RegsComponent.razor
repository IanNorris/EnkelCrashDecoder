@using EnkelCrashDecoder.Data.V0
@rendermode InteractiveServer
@inject SessionService SS

@if (_regData != null)
{
    <div class="reg-table">
            <span class="reg-value">RAX = @GetRegisterValue64("RAX")</span>
            <span class="reg-value">RBX = @GetRegisterValue64("RBX")</span>
            <span class="reg-value">RCX = @GetRegisterValue64("RCX")</span>
            <span class="reg-value">RDX = @GetRegisterValue64("RDX")</span>
            <span class="reg-value">RSI = @GetRegisterValue64("RSI")</span>
            <span class="reg-value">RDI = @GetRegisterValue64("RDI")</span>
            <span class="reg-value"> R8 = @GetRegisterValue64("R8")</span>

            <span class="reg-value"> R9 = @GetRegisterValue64("R9")</span>
            <span class="reg-value">R10 = @GetRegisterValue64("R10")</span>
            <span class="reg-value">R11 = @GetRegisterValue64("R11")</span>
            <span class="reg-value">R12 = @GetRegisterValue64("R12")</span>
            <span class="reg-value">R13 = @GetRegisterValue64("R13")</span>
            <span class="reg-value">R14 = @GetRegisterValue64("R14")</span>
            <span class="reg-value">R15 = @GetRegisterValue64("R15")</span>

            <span class="reg-value">RFLAGS = @GetRegisterValue64("RFLAGS")</span>
            <span class="reg-value">RIP = @GetRegisterValue64("RIP")</span>
            <span class="reg-value">RSP = @GetRegisterValue64("RSP")</span>
            <span class="reg-value">RBP = @GetRegisterValue64("RBP")</span>
            <span class="reg-value">FSBase = @GetRegisterValue64("FSBase")</span>
            <span class="reg-value">GSBase = @GetRegisterValue64("GSBase")</span>
            <span class="reg-value">GSBaseOther = @GetRegisterValue64("GSBaseOther")</span>

            <span class="reg-value">CR0 = @GetRegisterValue64("CR0")</span>
            <span class="reg-value">CR2 = @GetRegisterValue64("CR2")</span>
            <span class="reg-value">CR3 = @GetRegisterValue64("CR3")</span>
            <span class="reg-value">CR4 = @GetRegisterValue64("CR4")</span>

            <span class="reg-value">GDTR = @GetRegisterValue64("GDTR")</span>
            <span class="reg-value">IDTR = @GetRegisterValue64("IDTR")</span>
            <span class="reg-value">LDTR = @GetRegisterValue64("LDTR")</span>

            <span class="reg-value">LDTR = @GetRegisterValue64("LDTR")</span>
            <span class="reg-value">CS = @GetRegisterValue16("CS")</span>
            <span class="reg-value">DS = @GetRegisterValue16("DS")</span>
            <span class="reg-value">SS = @GetRegisterValue16("SS")</span>
            <span class="reg-value">ES = @GetRegisterValue16("ES")</span>
            <span class="reg-value">FS = @GetRegisterValue16("FS")</span>
            <span class="reg-value">GS = @GetRegisterValue16("GS")</span>

            <span class="reg-value">ESB = @GetRegisterValue16("EnkelStateBits")</span>
            <span class="reg-value">ISR0 = @GetRegisterValue8("ISR0")</span>
            <span class="reg-value">ISR1 = @GetRegisterValue8("ISR1")</span>
            <span class="reg-value"></span>
            <span class="reg-value"></span>
            <span class="reg-value"></span>
            <span class="reg-value"></span>
    </div>
}

@code {

    protected override void OnInitialized()
    {
        UpdateData();
        _sessionData.OnStateUpdated += () => InvokeAsync(() => UpdateData());
    }

    protected void UpdateData()
    {
        _sessionData = SS.GetScan(sessionId);

        foreach(var segment in _sessionData.Data.Segments)
        {
            if(segment.GetType() == typeof(QRPanicCPURegs))
            {
                _regData = segment;
            }
        }

        StateHasChanged();
    }

    public MarkupString FormatString(UInt64 value, int byteWidth)
    {
        // Convert the integer to a hexadecimal string with padding
        var hexValue = value.ToString("X");
        var padding = "0x".PadRight(2 + (byteWidth * 2) - hexValue.Length, '0');

        var classForValue = value == 0 ? "numeric-value-pad" : "numeric-value";
        var classForDecimal = value == 0 ? "numeric-value-pad" : "numeric-value";

        // Create the HTML string with spans for styling
        string resultHtml = $"<span class='numeric-value-pad'>{padding}</span>" +
                                $"<span class='{classForValue}'>{hexValue}</span>" +
                                $" <span class='{classForDecimal}'>({value})</span>";

        // Return as MarkupString
        return new MarkupString(resultHtml);
    }

    public T GetRegisterValue<T>(string name)
    {
        if (_regData != null)
        {
            var prop = _regData.GetType().GetField(name);

            if (prop != null)
            {
                return (T)_regData.GetType().GetField(name).GetValue(_regData);
            }
            else
            {
                throw new InvalidDataException($"Unknown register {name}");
            }
        }
        else
        {
            return default(T);
        }
    }

    public MarkupString GetRegisterValue64(string name)
    {
        var value = GetRegisterValue<UInt64>(name);
        return FormatString(value, 8);
    }

    public MarkupString GetRegisterValue32(string name)
    {
        var value = GetRegisterValue<UInt32>(name);
        return FormatString(value, 4);
    }

    public MarkupString GetRegisterValue16(string name)
    {
        var value = GetRegisterValue<UInt16>(name);
        return FormatString(value, 2);
    }

    public MarkupString GetRegisterValue8(string name)
    {
        var value = GetRegisterValue<byte>(name);
        return FormatString(value, 1);
    }

    [Parameter]
    public string sessionId { get; set; }

    [Parameter]
    public string componentName { get; set; }

    public SessionState _sessionData { get; set; }

    public object _regData { get; set; }
}
